CREATE TRIGGER [dbo].[UpdateTaskStatistic]
	ON [dbo].[Ratings]
	AFTER INSERT
AS
BEGIN
	DECLARE @TaskId INT, @SolvedCount FLOAT, @SolvedCorrectCount FLOAT, @AverageTime INT;
	DECLARE @PartOfCorrectAnswers FLOAT, @PartOfIncorrectAnswers FLOAT, @LogitOfTaskDifficulty FLOAT = 0;
	DECLARE @MinLogitOfTaskDifficulty INT = -100, @MaxLogitOfTaskDifficulty INT = 100;
	SELECT @TaskId = TaskId FROM INSERTED

	IF(OBJECT_ID('tempdb..#TempTableForSolvedStat') IS NOT NULL)
	BEGIN
		DROP TABLE #TempTableForSolvedStat
	END
	
	IF(OBJECT_ID('tempdb..#TempTableForRating') IS NOT NULL)
	BEGIN
		DROP TABLE #TempTableForSolvedStat
	END

	SELECT x.* 
	INTO #TempTableForRating
	FROM (SELECT * FROM Ratings
		  UNION
		  SELECT * FROM INSERTED) x

	SELECT DISTINCT
		StudentId,
		First_Value(IsSolved) OVER (PARTITION BY StudentId ORDER BY DateOfSolution) IsSolved,
		First_Value(ActualTime) OVER (PARTITION BY StudentId ORDER BY DateOfSolution) ActualTime
	INTO #TempTableForSolvedStat
	FROM #TempTableForRating
	WHERE TaskId = @TaskId

	SELECT @SolvedCount = COUNT(IsSolved) FROM #TempTableForSolvedStat
	SELECT @SolvedCorrectCount = COUNT(IsSolved) FROM #TempTableForSolvedStat WHERE IsSolved = 1
	SELECT @AverageTime = SUM(ActualTime)/COUNT(*) FROM #TempTableForSolvedStat
	SET @PartOfCorrectAnswers = @SolvedCorrectCount/@SolvedCount
	SET @PartOfIncorrectAnswers = (@SolvedCount - @SolvedCorrectCount)/@SolvedCount

	IF (@PartOfCorrectAnswers = 0)
	BEGIN
		SET @LogitOfTaskDifficulty = @MinLogitOfTaskDifficulty;
	END
	ELSE IF (@PartOfInCorrectAnswers = 0)
	BEGIN
		SET @LogitOfTaskDifficulty = @MaxLogitOfTaskDifficulty;
	END
	ELSE IF(@PartOfCorrectAnswers != @PartOfIncorrectAnswers)
	BEGIN
		SET @LogitOfTaskDifficulty = LOG(@PartOfIncorrectAnswers/@PartOfCorrectAnswers);
	END

	--SELECT @SolvedCount AS 'SolvedCount', @SolvedCorrectCount AS 'SolvedCorrectCount',
	--@PartOfCorrectAnswers AS 'PartOfCorrectAnswers', @PartOfIncorrectAnswers AS 'PartOfIncorrectAnswers',
	--@LogitOfTaskDifficulty AS 'LogitOfTaskDifficulty', @AverageTime AS 'AverageTime'

	IF NOT EXISTS(SELECT * FROM TaskStatistics WHERE TaskId = @TaskId)
	BEGIN
		INSERT INTO TaskStatistics
		VALUES(@TaskId, @SolvedCount, @SolvedCorrectCount, @PartOfCorrectAnswers,
		@PartOfIncorrectAnswers, @LogitOfTaskDifficulty, @PartOfIncorrectAnswers, @AverageTime)
	END
	ELSE
	BEGIN
		UPDATE TaskStatistics
		SET SolvedCount = @SolvedCount,
		SolvedCorrectCount = @SolvedCorrectCount,
		PartOfCorrectAnswers = @PartOfCorrectAnswers,
		PartOfIncorrectAnswers = @PartOfIncorrectAnswers,
		LogitOfTaskDifficulty = @LogitOfTaskDifficulty,
		Complexity = @PartOfIncorrectAnswers,
		AverageTime = @AverageTime
		WHERE TaskId = @TaskId
	END

	DECLARE @OverallAcademicPerformance FLOAT, @Variation FLOAT, @Dispersion FLOAT, @StandartDeviation FLOAT;
	DECLARE @AverageComplexityForTopic FLOAT, @AverageTimeForTopic INT, @AverageTimeForTask INT, @CountOfStudent INT;
	DECLARE @TopicId INT, @HighestPossibleScore FLOAT, @HighestScore FLOAT;
	SELECT @TopicId = TopicId FROM Tasks WHERE Id = @TaskId;

	IF(OBJECT_ID('tempdb..#TempTableForTopicStat') IS NOT NULL)
	BEGIN
		DROP TABLE #TempTableForTopicStat
	END

	SELECT DISTINCT
		TaskId,
		StudentId,
		First_Value(IsSolved) OVER (PARTITION BY StudentId, TaskId ORDER BY DateOfSolution) IsSolved,
		First_Value(ActualTime) OVER (PARTITION BY StudentId, TaskId ORDER BY DateOfSolution) ActualTime,
		Weight
	INTO #TempTableForTopicStat
	FROM #TempTableForRating r
	LEFT JOIN Tasks t
	ON t.Id = r.TaskId
	WHERE t.TopicId = @TopicId
	
	SELECT @CountOfStudent = COUNT(tt.StudentId) FROM (SELECT DISTINCT StudentId FROM #TempTableForTopicStat) tt
	SELECT @OverallAcademicPerformance  = CAST(SUM([Weight]) AS FLOAT)/CAST(@CountOfStudent AS FLOAT) 
	FROM #TempTableForTopicStat
	WHERE IsSolved = 1

	IF (@OverallAcademicPerformance IS NULL )
	BEGIN
		SET @OverallAcademicPerformance = 0;
	END

	SELECT @Variation = SUM(sq.Square) FROM
	(SELECT SQUARE(CAST(SUM(CASE WHEN IsSolved != 0 THEN Weight ELSE 0 END) AS FLOAT) - @OverallAcademicPerformance) Square
	FROM #TempTableForTopicStat
	GROUP BY StudentId) sq

	IF (@CountOfStudent = 1)
	BEGIN
		SELECT @Dispersion = @Variation;
		SELECT @StandartDeviation = SQRT(@Variation);
	END
	ELSE
	BEGIN
		SELECT @Dispersion = @Variation/(@CountOfStudent - 1);
		SELECT @StandartDeviation = SQRT(@Variation/(@CountOfStudent - 1));
	END

	SELECT @AverageComplexityForTopic = SUM(Complexity)/COUNT(ts.TaskId),
	@AverageTimeForTask = SUM(AverageTime)/COUNT(ts.TaskId),
	@AverageTimeForTopic = SUM(AverageTime)
	FROM TaskStatistics ts, Tasks t
	WHERE ts.TaskId = t.Id and ts.TaskId IN (SELECT TaskId FROM #TempTableForTopicStat)

	SELECT @HighestPossibleScore = SUM(Weight) FROM Tasks WHERE TopicId = @TopicId
	SELECT @HighestScore = MAX(sums.SumOfScore)
	FROM (SELECT SUM(CASE WHEN IsSolved != 0 THEN Weight ELSE 0 END) SumOfScore
	FROM #TempTableForTopicStat
	GROUP BY StudentId) sums

	--SELECT @CountOfStudent AS 'CountOfStudent', @OverallAcademicPerformance AS 'OverallAcademicPerformance',
	--@Variation AS 'Variation', @Dispersion AS 'Dispersion',
	--@StandartDeviation AS 'StandartDeviation', @AverageComplexityForTopic AS 'AverageComplexityForTopic',
	--@AverageTimeForTask AS 'AverageTimeForTask', @AverageTimeForTopic AS 'AverageTimeForTopic',
	--@HighestPossibleScore AS 'HighestPossibleScore', @HighestScore AS 'HighestScore'

	IF NOT EXISTS(SELECT * FROM TopicStatistics WHERE TopicId = @TopicId)
	BEGIN
		INSERT INTO TopicStatistics
		VALUES(@TopicId, @OverallAcademicPerformance, @Variation, @Dispersion, @StandartDeviation,
		@AverageComplexityForTopic, @AverageTimeForTopic, @AverageTimeForTask, 0, @HighestPossibleScore, @HighestScore)
	END
	ELSE
	BEGIN
		UPDATE TopicStatistics
		SET OverallAcademicPerformance = @OverallAcademicPerformance,
		Dispersion = 1,
		StandartDeviation = @StandartDeviation,
		AverageComplexity = @AverageComplexityForTopic,
		AverageTimeForTopic = @AverageTimeForTopic,
		AverageTimeForTask = @AverageTimeForTask,
		HighestPossibleScore = @HighestPossibleScore,
		HighestScore = @HighestScore
		WHERE TopicId = @TopicId
	END

	DECLARE @StudentId nvarchar(128), @SolvedTasksCount FLOAT, @SolvedCorrectTasksCount FLOAT;
	DECLARE @PartOfCorrectStudentAnswers FLOAT, @PartOfIncorrectStudentAnswers FLOAT, @LogitOfLevelKnowledge FLOAT = 0;
	SELECT @StudentId = StudentId FROM INSERTED;

	IF(OBJECT_ID('tempdb..#TempTableForStudentStat') IS NOT NULL)
	BEGIN
		DROP TABLE #TempTableForStudentStat
	END

	SELECT DISTINCT
		TaskId,
		First_Value(IsSolved) OVER (PARTITION BY TaskId ORDER BY DateOfSolution) IsSolved
	INTO #TempTableForStudentStat
	FROM #TempTableForRating
	WHERE StudentId = @StudentId

	SELECT @SolvedTasksCount = COUNT(IsSolved) FROM #TempTableForStudentStat
	SELECT @SolvedCorrectTasksCount = COUNT(IsSolved) FROM #TempTableForStudentStat WHERE IsSolved = 1
	SET @PartOfCorrectStudentAnswers = @SolvedCorrectTasksCount/@SolvedTasksCount
	SET @PartOfIncorrectStudentAnswers = (@SolvedTasksCount - @SolvedCorrectTasksCount)/@SolvedTasksCount

	IF (@PartOfCorrectStudentAnswers = 0)
	BEGIN
		SET @LogitOfLevelKnowledge = @MinLogitOfTaskDifficulty;
	END
	ELSE IF (@PartOfIncorrectStudentAnswers = 0)
	BEGIN
		SET @LogitOfLevelKnowledge = @MaxLogitOfTaskDifficulty;
	END
	ELSE IF(@PartOfCorrectStudentAnswers != @PartOfIncorrectStudentAnswers)
	BEGIN
		SET @LogitOfLevelKnowledge = LOG(@PartOfIncorrectStudentAnswers/@PartOfCorrectStudentAnswers);
	END

	--SELECT @SolvedTasksCount AS 'SolvedTasksCount', @SolvedCorrectTasksCount AS 'SolvedCorrectTasksCount',
	--@PartOfCorrectStudentAnswers AS 'PartOfCorrectStudentAnswers', @PartOfInCorrectStudentAnswers AS 'PartOfInCorrectStudentAnswers',
	--@LogitOfLevelKnowledge AS 'LogitOfLevelKnowledge'

	IF NOT EXISTS(SELECT * FROM StudentStatistics WHERE StudentId = @StudentId)
	BEGIN
		INSERT INTO StudentStatistics
		VALUES(@StudentId, @PartOfCorrectStudentAnswers, @PartOfIncorrectStudentAnswers, @LogitOfLevelKnowledge)
	END
	ELSE
	BEGIN
		UPDATE StudentStatistics
		SET PartOfCorrectAnswers = @PartOfCorrectStudentAnswers,
		PartOfInCorrectAnswers = @PartOfIncorrectStudentAnswers,
		LogitOfLevelKnowledge = @LogitOfLevelKnowledge
		WHERE StudentId = @StudentId
	END
END


CREATE TRIGGER [dbo].[UpdateTopicWeight]
	ON [dbo].[Tasks]
	AFTER INSERT
AS
BEGIN
	DECLARE @Weight INT, @TopicId INT
	SELECT @Weight = Weight, @TopicId = TopicId FROM INSERTED
	UPDATE TopicStatistics
	SET HighestPossibleScore += @Weight
	WHERE TopicId = @TopicId
END